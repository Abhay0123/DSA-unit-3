function runProgram(input) {
  input = input.trim().split("\n");
  let tc = +input[0];
  let line = 1;
  for (let i = 0; i < tc; i++) {
    let l = +input[line++];
    let arr = input[line++].trim().split(" ").map(Number);
    // console.log(l,arr)
    nearestSmallerElement(l, arr);
  }
}
function nearestSmallerElement(l, arr) {
  let left = indexLeft(l, arr);
  let right = indexRight(l, arr);
  let ans = [];
  for (let i = 0; i < l; i++) {
    if (left[i] == -1 && right[i] == -1) {
      ans.push(-1);
    } else if (right[i] == -1) {
      ans.push(arr[left[i]]);
    } else if (left[i] == -1) {
      ans.push(arr[right[i]]);
    } else {
      let l = Math.abs(i - left[i]);
      let r = Math.abs(i - right[i]);
      if (l > r) {
        ans.push(arr[right[i]]);
      } else {
        ans.push(arr[left[i]]);
      }
    }
  }
  console.log(ans.join(" "));
}
function indexLeft(l, arr) {
  let left = [];
  let stack = [];
  for (let i = 0; i < l; i++) {
    while (stack.length !== 0 && arr[i] <= arr[stack[stack.length - 1]]) {
      stack.pop();
    }
    if (stack.length === 0) {
      left[i] = -1;
    } else {
      left[i] = stack[stack.length - 1];
    }
    stack.push(i);
  }
  return left;
}

function indexRight(l, arr) {
  let right = [];
  let stack = [];
  for (let i = l - 1; i >= 0; i--) {
    while (stack.length !== 0 && arr[i] <= arr[stack[stack.length - 1]]) {
      stack.pop();
    }
    if (stack.length === 0) {
      right[i] = -1;
    } else {
      right[i] = stack[stack.length - 1];
    }
    stack.push(i);
  }
  return right;
}

if (process.env.USERNAME === "") {
  runProgram(``);
} else {
  process.stdin.resume();
  process.stdin.setEncoding("ascii");
  let read = "";
  process.stdin.on("data", function (input) {
    read += input;
  });
  process.stdin.on("end", function () {
    read = read.replace(/\n$/, "");
    read = read.replace(/\n$/, "");
    runProgram(read);
  });
  process.on("SIGINT", function () {
    read = read.replace(/\n$/, "");
    runProgram(read);
    process.exit(0);
  });
}
